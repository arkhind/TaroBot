from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from loguru import logger
from config import BOT_TOKEN
import sys
import asyncio
from vox_example import process_user_nickname
from keyboards import main_menu


answers_prompt_ = "".join(open("prompts/answers_prompt.txt").readlines())
compatibility_prompt_ = "".join(open("prompts/compatibility_prompt.txt").readlines())
prediction_prompt_ = "".join(open("prompts/prediction_prompt.txt").readlines())
qualities_prompt_ = "".join(open("prompts/qualities_prompt.txt").readlines())
yes_no_prompt_ = "".join(open("prompts/yes_no_prompt.txt").readlines())

bot = None
dp = Dispatcher()
logger.remove()
logger.add(sys.stdout, format="{time} {level} {message}", level="INFO", colorize=True)

def get_current_username(message: Message | CallbackQuery) -> str | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message –∏–ª–∏ callback.
    """
    if isinstance(message, CallbackQuery):
        if message.from_user:
            return message.from_user.username
    elif isinstance(message, Message):
        if message.from_user:
            return message.from_user.username
    return None

@dp.message(CommandStart())
async def start_handler(message: Message):
    nickname = get_current_username(message)
    await message.answer(f"–û–ø—Ü–∏–∏:\n–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {nickname}", reply_markup=main_menu)

@dp.message(Command("—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"))
async def compatibility_handler(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@dp.callback_query()
async def handle_callback_query(callback: CallbackQuery):
    if not callback.message:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return
        
    if callback.data == "answers":
        if answers_prompt_:
            nickname = get_current_username(callback)
            if not nickname:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await callback.message.answer("üîÆ–¢—É—Å—É—é –∫–æ–ª–æ–¥—ÉüîÆ")
            
            try:
                report = process_user_nickname(nickname, answers_prompt_)
                if report:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    await loading_msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
                else:
                    await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    elif callback.data == "yes_no":
        if yes_no_prompt_:
            nickname = get_current_username(callback)
            if not nickname:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await callback.message.answer("üîÆ–¢—É—Å—É—é –∫–æ–ª–æ–¥—ÉüîÆ")
            
            try:
                report = process_user_nickname(nickname, yes_no_prompt_)
                if report:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    await loading_msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
                else:
                    await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–î–∞/–ù–µ—Ç' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    elif callback.data == "compatibility":
        if compatibility_prompt_:
            nickname = get_current_username(callback)
            if not nickname:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await callback.message.answer("üîÆ–¢—É—Å—É—é –∫–æ–ª–æ–¥—ÉüîÆ")
            
            try:
                report = process_user_nickname(nickname, compatibility_prompt_)
                if report:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    await loading_msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
                else:
                    await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    elif callback.data == "prediction":
        if prediction_prompt_:
            nickname = get_current_username(callback)
            if not nickname:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await callback.message.answer("üîÆ–¢—É—Å—É—é –∫–æ–ª–æ–¥—ÉüîÆ")
            
            try:
                report = process_user_nickname(nickname, prediction_prompt_)
                if report:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    await loading_msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
                else:
                    await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    elif callback.data == "qualities":
        if qualities_prompt_:
            nickname = get_current_username(callback)
            if not nickname:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await callback.message.answer("üîÆ–¢—É—Å—É—é –∫–æ–ª–æ–¥—ÉüîÆ")
            
            try:
                report = process_user_nickname(nickname, qualities_prompt_)
                if report:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    await loading_msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
                else:
                    await loading_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                await loading_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–ü–ª–æ—Ö–∏–µ –∏ —Ö–æ—Ä–æ—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    await callback.answer()

@dp.message()
async def handle_buttons(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏.")

async def main():
    global bot
    if not BOT_TOKEN:
        logger.error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env')
        return
    bot = Bot(token=BOT_TOKEN)
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
