import sys
import asyncio
from datetime import datetime
from loguru import logger
import uuid
import html
import traceback
import concurrent.futures
import os

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode, ChatAction
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from mixpanel import Mixpanel
import aiogram.exceptions
from vox.exceptions import ApiError, NotFoundError

import config
from config import BOT_TOKEN, VOX_TOKEN
from keyboards import main_menu, get_name_keyboard, get_zodiac_keyboard
from vox_executable import process_user_nickname, process_user_nicknames
from db.User import User
from vox.asyncapi import AsyncVoxAPI
from translations.get_phrase import get_phrase
from utils.get_user_info import get_current_username, get_language
from utils.login_requied import only_registered, only_registered_callback
from utils.zodiac import get_zodiac_sign
from inline_daily_prediction import router as inline_router, VoxMiddleware
from typing import Union
from send_weekly_prediction import send_weekly_predictions
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
from prompts import (
    answers_prompt,
    yes_no_prompt,
    compatibility_prompt,
    qualities_prompt,
    prediction_prompt,
    daily_prediction_prompt,
    compatibility_of_2_prompt,
    answers_prompt_gpt,
    yes_no_prompt_gpt,
    compatibility_prompt_gpt,
    qualities_prompt_gpt,
    daily_prediction_prompt_gpt,
    compatibility_of_2_prompt_gpt,
)


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class BotStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_yes_no_question = State()
    waiting_for_comp_nick = State()
    waiting_for_qualities_nick = State()
    waiting_for_name = State()
    waiting_for_zodiac = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM
bot = None
vox = None
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
logger.remove()
logger.add(sys.stdout, format="{time} {level} {message}", level="INFO", colorize=True)
if config.MIXPANEL_TOKEN:
    mixpanel = Mixpanel(config.MIXPANEL_TOKEN)
else:
    mixpanel = None


@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    assert message.from_user
    user, created = await User.aio_get_or_create(
        telegram_user_id=message.from_user.id, telegram_chat_id=message.chat.id
    )
    nickname = message.from_user.username
    full_name = message.from_user.full_name

    if created:
        # –°–æ–∑–¥–∞–ª–∏ => –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            get_phrase(
                phrase_tag="registration_welcome", language=get_language(message)
            )
        )
        await message.answer(
            get_phrase(phrase_tag="ask_name", language=get_language(message)),
            reply_markup=get_name_keyboard(nickname, full_name),
        )
        await state.set_state(BotStates.waiting_for_name)
    else:
        # –£–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ => —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.name and user.birth_date:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                get_phrase(phrase_tag="welcome_back", language=get_language(message))
            )

            if mixpanel:
                mixpanel.track(
                    distinct_id=str(message.from_user.id),
                    event_name="menu_open",
                    properties={
                        "telegram_user_id": message.from_user.id,
                        "telegram_chat_id": message.chat.id,
                        "user_id": user.user_id,
                    },
                )

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            zodiac_sign = (
                get_phrase(phrase_tag=user.zodiac_sign, language=get_language(message))
                if user.zodiac_sign
                else "–ù–µ —É–∫–∞–∑–∞–Ω"
            )

            await message.answer(
                get_phrase(phrase_tag="menu", language=get_language(message))
                .replace("{nickname}", nickname or user.name)
                .replace("{zodiac_sign}", zodiac_sign),
                reply_markup=main_menu,
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer(
                get_phrase(phrase_tag="ask_name", language=get_language(message)),
                reply_markup=get_name_keyboard(nickname, full_name),
            )
            await state.set_state(BotStates.waiting_for_name)
@dp.message(Command("menu"))
@only_registered
async def menu_handler(message: Message, db_user: User):
    nickname = db_user.name

    if mixpanel:
        mixpanel.track(
            distinct_id=str(message.from_user.id),
            event_name="menu_open",
            properties={
                "telegram_user_id": message.from_user.id,
                "telegram_chat_id": message.chat.id,
                "user_id": db_user.user_id,
            },
        )

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    zodiac_sign = (
        get_phrase(phrase_tag=db_user.zodiac_sign, language=get_language(message))
        if db_user.zodiac_sign
        else "–ù–µ —É–∫–∞–∑–∞–Ω"
    )

    await message.answer(
        get_phrase(phrase_tag="menu", language=get_language(message))
        .replace("{nickname}", nickname or db_user.name)
        .replace("{zodiac_sign}", zodiac_sign),
        reply_markup=main_menu,
    )


@dp.callback_query(
    lambda c: c.data
    in ["answers", "yes_no", "compatibility", "qualities", "prediction"]
)
@only_registered_callback
async def handle_callback_query(
    callback: CallbackQuery, state: FSMContext, db_user: User
):
    logger.info(f"[CALLBACK] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback.data} –æ—Ç user_id={callback.from_user.id if callback.from_user else 'unknown'}")
    await callback.answer()
    nickname = db_user.name
    if not nickname:
        await callback.message.answer(
            get_phrase(phrase_tag="nickname_error", language=get_language(callback))
        )
        return

    if callback.data == "answers":
        await state.set_state(BotStates.waiting_for_question)
        await callback.message.answer("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif callback.data == "yes_no":
        await state.set_state(BotStates.waiting_for_yes_no_question)
        await callback.message.answer("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –î–∞/–ù–µ—Ç:")
    elif callback.data == "compatibility":
        await state.set_state(BotStates.waiting_for_comp_nick)
        await callback.message.answer(
            "üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (@nickname):"
        )
    elif callback.data == "qualities":
        await state.set_state(BotStates.waiting_for_qualities_nick)
        await callback.message.answer(
            "üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (@nickname):"
        )
    elif callback.data == "prediction":
        # –ü—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø. –≤–≤–æ–¥–∞
        loading = await callback.message.answer(
            get_phrase(phrase_tag="wait_vox_answer", language=get_language(callback))
        )
        await callback.message.bot.send_chat_action(
            callback.message.chat.id, ChatAction.TYPING
        )
        if mixpanel:
            mixpanel.track(
                distinct_id=str(callback.from_user.id),
                event_name="prediction",
                properties={
                    "telegram_user_id": callback.from_user.id,
                    "telegram_chat_id": callback.message.chat.id,
                    "user_id": db_user.user_id,
                },
            )
        try:
            report = await process_user_nickname(
                vox, get_current_username(callback), daily_prediction_prompt
            )
            if report:
                await loading.edit_text(report, parse_mode=ParseMode.HTML, reply_markup=main_menu)
            else:
                await loading.edit_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu
                )
        except Exception as e:
            logger.exception(e)
            import traceback
            error_text = (
                f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ (prediction callback):</b>\n"
                f"<b>Nickname:</b> {get_current_username(callback)}\n"
                f"<pre>{traceback.format_exc()}</pre>"
            )
            chat_id = os.getenv('ERROR_CHAT_ID')
            if chat_id:
                await callback.message.bot.send_message(chat_id, error_text)
            else:
                logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
            await loading.edit_text(
                get_phrase(
                    phrase_tag="processed_error", language=get_language(callback)
                ),
                reply_markup=main_menu
            )


@dp.callback_query(lambda c: c.data.startswith("name_"))
async def handle_name_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "name_skip":
        name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    else:
        name = callback.data.replace("name_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    await callback.message.answer(
        get_phrase(phrase_tag="ask_zodiac_sign", language=get_language(callback)),
        reply_markup=get_zodiac_keyboard()
    )
    await state.set_state(BotStates.waiting_for_zodiac)


@dp.message(BotStates.waiting_for_name)
async def process_name_input(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        if len(name) > 50:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.")
            return
        await state.update_data(name=name)
        await message.answer(
            get_phrase(phrase_tag="ask_zodiac_sign", language=get_language(message)),
            reply_markup=get_zodiac_keyboard()
        )
        await state.set_state(BotStates.waiting_for_zodiac)
    except Exception as e:
        logger.exception(f"[process_name_input] Unhandled error: {e}")
        import traceback
        error_text = f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:</b>\n<pre>{traceback.format_exc()}</pre>"
        chat_id = os.getenv('ERROR_CHAT_ID')
        if chat_id:
            await message.bot.send_message(chat_id, error_text)
        else:
            logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
        # Fallback –Ω–∞ GPT (–º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å –¥–ª—è –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        # raise


@dp.callback_query(lambda c: c.data.startswith("zodiac_"))
async def handle_zodiac_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (—Ç–µ–≥ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç zodiac_)
    zodiac_tag = callback.data
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
    data = await state.get_data()
    name = data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    zodiac_sign = get_phrase(phrase_tag=zodiac_tag, language=get_language(callback))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    user = await User.aio_get(
        telegram_user_id=callback.from_user.id, telegram_chat_id=callback.message.chat.id
    )
    user.name = name
    user.birth_date = None  # –ë–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    user.zodiac_sign = zodiac_tag  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–≥
    await user.aio_save()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    if mixpanel:
        mixpanel.track(
            distinct_id=str(callback.from_user.id),
            event_name="finish_registration",
            properties={
                "telegram_user_id": callback.from_user.id,
                "telegram_chat_id": callback.message.chat.id,
                "user_id": user.user_id,
            },
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback.message.answer(
        get_phrase(
            phrase_tag="registration_complete", language=get_language(callback)
        ).replace("{zodiac_sign}", zodiac_sign)
    )
    logger.info(f"User registered {user.user_id}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    nickname = name
    await callback.message.answer(
        get_phrase(phrase_tag="menu", language=get_language(callback))
        .replace("{nickname}", nickname)
        .replace("{zodiac_sign}", zodiac_sign),
        reply_markup=main_menu,
    )


@dp.message(BotStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    try:
        user_nick = get_current_username(message)
        question = message.text.strip()
        user = await User.aio_get(
            telegram_user_id=message.from_user.id, telegram_chat_id=message.chat.id
        )
        await state.clear()
        loading = await message.answer(
            get_phrase(phrase_tag="wait_vox_answer", language=get_language(message))
        )
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if mixpanel:
            mixpanel.track(
                distinct_id=str(message.from_user.id),
                event_name="question",
                properties={
                    "telegram_user_id": message.from_user.id,
                    "telegram_chat_id": message.chat.id,
                    "user_id": user.user_id,
                },
            )
        prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + answers_prompt + prediction_html_instruction
        report = await process_user_nickname(vox, user_nick, prompt)
        if report:
            await loading.edit_text(report, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        else:
            await loading.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu
            )
    except Exception as e:
        logger.exception(f"[process_question] Unhandled error: {e}")
        import traceback
        error_text = f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:</b>\n<pre>{traceback.format_exc()}</pre>"
        chat_id = os.getenv('ERROR_CHAT_ID')
        if chat_id:
            await message.bot.send_message(chat_id, error_text)
        else:
            logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
        # Fallback –Ω–∞ GPT
        try:
            from utils.openai_gpt import ask_gpt
            prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
            prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + answers_prompt_gpt + prediction_html_instruction
            loop = asyncio.get_running_loop()
            gpt_result = await loop.run_in_executor(None, ask_gpt, prompt)
            await message.answer(gpt_result, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        except Exception as gpt_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT: {gpt_e}")
        # raise


@dp.message(BotStates.waiting_for_yes_no_question)
async def process_yes_no(message: Message, state: FSMContext):
    try:
        user_nick = get_current_username(message)
        question = message.text.strip()
        user = await User.aio_get(
            telegram_user_id=message.from_user.id, telegram_chat_id=message.chat.id
        )
        await state.clear()
        loading = await message.answer(
            get_phrase(phrase_tag="wait_vox_answer", language=get_language(message))
        )
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if mixpanel:
            mixpanel.track(
                distinct_id=str(message.from_user.id),
                event_name="yes_no_question",
                properties={
                    "telegram_user_id": message.from_user.id,
                    "telegram_chat_id": message.chat.id,
                    "user_id": user.user_id,
                },
            )
        prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + yes_no_prompt + prediction_html_instruction
        report = await process_user_nickname(vox, user_nick, prompt)
        if report:
            await loading.edit_text(report, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        else:
            await loading.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu
            )
    except Exception as e:
        logger.exception(f"[process_yes_no] Unhandled error: {e}")
        import traceback
        error_text = f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –î–∞/–ù–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:</b>\n<pre>{traceback.format_exc()}</pre>"
        chat_id = os.getenv('ERROR_CHAT_ID')
        if chat_id:
            await message.bot.send_message(chat_id, error_text)
        else:
            logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
        # Fallback –Ω–∞ GPT
        try:
            from utils.openai_gpt import ask_gpt
            prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
            prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + yes_no_prompt_gpt + prediction_html_instruction
            loop = asyncio.get_running_loop()
            gpt_result = await loop.run_in_executor(None, ask_gpt, prompt)
            await message.answer(gpt_result, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        except Exception as gpt_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT: {gpt_e}")
        # raise


@dp.message(BotStates.waiting_for_comp_nick)
async def process_compatibility(message: Message, state: FSMContext):
    try:
        user_nick = get_current_username(message)
        target = message.text.strip()
        user = await User.aio_get(
            telegram_user_id=message.from_user.id, telegram_chat_id=message.chat.id
        )
        logger.info(f"[DEBUG] process_compatibility: user_nick = {user_nick}")
        logger.info(f"[DEBUG] process_compatibility: target = {target}")
        logger.info(f"[DEBUG] process_compatibility: target[1:] = {target[1:]}")
        if not target.startswith("@"):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤–∏–¥–∞ @nickname.")
            return
        if target[1:] == user_nick:
            await message.answer(
                "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∂–µ –Ω–∏–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–∏–¥–∞ @nickname."
            )
            return
        await state.clear()
        loading = await message.answer(
            get_phrase(phrase_tag="wait_vox_answer", language=get_language(message))
        )
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if mixpanel:
            mixpanel.track(
                distinct_id=str(message.from_user.id),
                event_name="compatibility",
                properties={
                    "telegram_user_id": message.from_user.id,
                    "telegram_chat_id": message.chat.id,
                    "user_id": user.user_id,
                },
            )
        logger.info(f"[DEBUG] process_compatibility: –≤—ã–∑—ã–≤–∞–µ–º process_user_nicknames —Å {user_nick} –∏ {target[1:]}")
        prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
        manual_prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç—Ç–∏—Ö –ª—é–¥–µ–π –º–µ–∂–¥—É —Å–æ–±–æ–π (—Ç–µ–±–µ –ø–∏—à–µ—Ç @" + user_nick ").\n"
        "–û–ø–∏—à–∏ –≥–ª–∞–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö.\n"
        "–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª—é–¥–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã.\n"
        "–¢–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ, –≤—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ.\n"
        "–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
        "–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö —Ç–∞—Ä–æ, —É–ø–æ–º—è–Ω–∏ –∫–∞—Ä—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –º–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π bullet list.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <ul>, <ol>, <li>.\n"
        "–ù–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏ —á–∞—Ç–∞—Ö.\n"
        "–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π <html> –∏ <body> —Ç–µ–≥–∏."
        )
        report = await process_user_nicknames(
            vox, user_nick, target[1:], manual_prompt
        )
        if report:
            await loading.edit_text(report, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        else:
            logger.error(f"[DEBUG] process_compatibility: process_user_nicknames –≤–µ—Ä–Ω—É–ª None")
            await loading.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu
            )
    except Exception as e:
        logger.exception(f"[process_compatibility] Unhandled error: {e}")
        import traceback
        error_text = f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:</b>\n<pre>{traceback.format_exc()}</pre>"
        chat_id = os.getenv('ERROR_CHAT_ID')
        if chat_id:
            await message.bot.send_message(chat_id, error_text)
        else:
            logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
        # Fallback –Ω–∞ GPT
        try:
            from utils.openai_gpt import ask_gpt
            prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
            prompt = compatibility_prompt_gpt + prediction_html_instruction
            loop = asyncio.get_running_loop()
            gpt_result = await loop.run_in_executor(None, ask_gpt, prompt)
            await message.answer(gpt_result, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        except Exception as gpt_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT: {gpt_e}")
        # raise


@dp.message(BotStates.waiting_for_qualities_nick)
async def process_qualities(message: Message, state: FSMContext):
    try:
        user_nick = get_current_username(message)
        target = message.text.strip()
        user = await User.aio_get(
            telegram_user_id=message.from_user.id, telegram_chat_id=message.chat.id
        )
        logger.info(f"[DEBUG] process_qualities: user_nick = {user_nick}")
        logger.info(f"[DEBUG] process_qualities: target = {target}")
        logger.info(f"[DEBUG] process_qualities: target[1:] = {target[1:]}")
        if not target.startswith("@"):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤–∏–¥–∞ @nickname.")
            return
        if target[1:] == user_nick:
            await message.answer(
                "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∂–µ –Ω–∏–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–∏–¥–∞ @nickname."
            )
            return
        await state.clear()
        loading = await message.answer(
            get_phrase(phrase_tag="wait_vox_answer", language=get_language(message))
        )
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        if mixpanel:
            mixpanel.track(
                distinct_id=str(message.from_user.id),
                event_name="qualities",
                properties={
                    "telegram_user_id": message.from_user.id,
                    "telegram_chat_id": message.chat.id,
                    "user_id": user.user_id,
                },
            )
        logger.info(f"[DEBUG] process_qualities: –≤—ã–∑—ã–≤–∞–µ–º process_user_nickname –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤ {target[1:]}")
        target_qualities = await process_user_nickname(
            vox, target[1:], qualities_prompt["people_qualities"]
        )  ## –ø–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ target'–∞
        if target_qualities:
            logger.info(f"[DEBUG] process_qualities: –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º process_user_nicknames")
            prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
            report = await process_user_nicknames(
                vox,
                user_nick,
                target[1:],
                qualities_prompt["tips"].replace("{info}", target_qualities) + prediction_html_instruction,
            )
            if report:
                await loading.edit_text(report, parse_mode=ParseMode.HTML, reply_markup=main_menu)
            else:
                logger.error(f"[DEBUG] process_qualities: process_user_nicknames –≤–µ—Ä–Ω—É–ª None")
                await loading.edit_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu
                )
        else:
            logger.error(f"[DEBUG] process_qualities: process_user_nickname –≤–µ—Ä–Ω—É–ª None")
            await loading.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu
            )
    except Exception as e:
        logger.exception(f"[process_qualities] Unhandled error: {e}")
        import traceback
        error_text = f"<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:</b>\n<pre>{traceback.format_exc()}</pre>"
        chat_id = os.getenv('ERROR_CHAT_ID')
        if chat_id:
            await message.bot.send_message(chat_id, error_text)
        else:
            logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
        # Fallback –Ω–∞ GPT
        try:
            from utils.openai_gpt import ask_gpt
            prediction_html_instruction = '\n\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown.'
            prompt = qualities_prompt_gpt["tips"] + prediction_html_instruction
            loop = asyncio.get_running_loop()
            gpt_result = await loop.run_in_executor(None, ask_gpt, prompt)
            await message.answer(gpt_result, parse_mode=ParseMode.HTML, reply_markup=main_menu)
        except Exception as gpt_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT: {gpt_e}")
        # raise


@dp.message()
async def fallback(message: Message):
    if message.chat.type == "private":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (/menu).")


async def on_error(update, exception):
    logger.error(f"[on_error] {exception}")
    import traceback
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    context = ""
    details = ""
    if hasattr(update, 'inline_query') and update.inline_query:
        context = "–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (inline_query)"
        details = f"\n<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b> {getattr(update.inline_query, 'query', '')}"
    elif hasattr(update, 'callback_query') and update.callback_query:
        context = "–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (callback_query)"
        data = getattr(update.callback_query, 'data', '')
        user_id = getattr(getattr(update.callback_query, 'from_user', None), 'id', '')
        details = f"\n<b>Callback data:</b> {data}\n<b>User ID:</b> {user_id}"
    else:
        context = "–û—à–∏–±–∫–∞ –≤–Ω–µ message-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, polling/callback)"
    error_text = f"<b>‚ùóÔ∏è {context}:</b>{details}\n<pre>{traceback.format_exc()}</pre>"
    chat_id = os.getenv('ERROR_CHAT_ID')
    if chat_id:
        await message.bot.send_message(chat_id, error_text)
    else:
        logger.error('ERROR_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç')
    return True


async def main():
    global bot, vox
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
    scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(
        send_weekly_predictions,
        CronTrigger(day_of_week='mon', hour=7, minute=0),
        name="Weekly predictions"
    )
    scheduler.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline —Ä–µ–∂–∏–º–∞
    bot = Bot(
        token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    vox = AsyncVoxAPI(token=VOX_TOKEN)

    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ vox –≤ inline —Ö–µ–Ω–¥–ª–µ—Ä—ã
    inline_router.inline_query.middleware(VoxMiddleware(vox))
    inline_router.callback_query.middleware(VoxMiddleware(vox))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º inline —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(inline_router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {bot.id}")
    await dp.start_polling(
        bot,
        allowed_updates=dp.resolve_used_update_types(),
        on_error=on_error
    )


if __name__ == "__main__":
    asyncio.run(main())
