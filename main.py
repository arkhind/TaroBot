from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode, ChatAction
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from config import BOT_TOKEN
import sys
import asyncio
from vox_executable import process_user_nickname, process_user_nicknames
from keyboards import main_menu

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
answers_prompt_ = open("prompts/answers_prompt.txt").read()
yes_no_prompt_ = open("prompts/yes_no_prompt.txt").read()
compatibility_prompt_ = open("prompts/compatibility_prompt.txt").read()
qualities_prompt_ = open("prompts/qualities_prompt.txt").read()
prediction_prompt_ = open("prompts/prediction_prompt.txt").read()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class BotStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_yes_no_question = State()
    waiting_for_comp_nick = State()
    waiting_for_qualities_nick = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM
bot = None
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
logger.remove()
logger.add(sys.stdout, format="{time} {level} {message}", level="INFO", colorize=True)

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞

def get_current_username(message: Message | CallbackQuery) -> str | None:
    if isinstance(message, (Message, CallbackQuery)) and message.from_user:
        return message.from_user.username
    return None

@dp.message(CommandStart())
async def start_handler(message: Message):
    nickname = get_current_username(message)
    await message.answer(f"–û–ø—Ü–∏–∏:\n–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {nickname}", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data in ["answers", "yes_no", "compatibility", "qualities", "prediction"])
async def handle_callback_query(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    nickname = get_current_username(callback)
    if not nickname:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    if callback.data == "answers":
        await state.set_state(BotStates.waiting_for_question)
        await callback.message.answer("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    elif callback.data == "yes_no":
        await state.set_state(BotStates.waiting_for_yes_no_question)
        await callback.message.answer("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –î–∞/–ù–µ—Ç:")
    elif callback.data == "compatibility":
        await state.set_state(BotStates.waiting_for_comp_nick)
        await callback.message.answer("üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (@nickname):")
    elif callback.data == "qualities":
        await state.set_state(BotStates.waiting_for_qualities_nick)
        await callback.message.answer("üîÆ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (@nickname):")
    elif callback.data == "prediction":
        # –ü—Ä—è–º–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø. –≤–≤–æ–¥–∞
        await callback.message.bot.send_chat_action(callback.message.chat.id, ChatAction.TYPING)
        loading = await callback.message.answer("üîÆ –¢—É—Å—É—é –∫–æ–ª–æ–¥—É üîÆ")
        try:
            report = process_user_nickname(nickname, prediction_prompt_)
            if report:
                await loading.edit_text(report, parse_mode=ParseMode.MARKDOWN)
            else:
                await loading.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(e)
            await loading.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(BotStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    user_nick = get_current_username(message)
    question = message.text.strip()
    await state.clear()
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    loading = await message.answer("üîÆ –¢—É—Å—É—é –∫–æ–ª–æ–¥—É üîÆ")
    try:
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + answers_prompt_
        report = process_user_nickname(user_nick, prompt)
        await loading.edit_text(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(e)
        await loading.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(BotStates.waiting_for_yes_no_question)
async def process_yes_no(message: Message, state: FSMContext):
    user_nick = get_current_username(message)
    question = message.text.strip()
    await state.clear()
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    loading = await message.answer("üîÆ –¢—É—Å—É—é –∫–æ–ª–æ–¥—É üîÆ")
    try:
        prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + yes_no_prompt_
        report = process_user_nickname(user_nick, prompt)
        await loading.edit_text(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(e)
        await loading.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(BotStates.waiting_for_comp_nick)
async def process_compatibility(message: Message, state: FSMContext):
    user_nick = get_current_username(message)
    target = message.text.strip()
    if not target.startswith("@"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤–∏–¥–∞ @nickname.")
        return
    await state.clear()
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    loading = await message.answer("üîÆ –¢—É—Å—É—é –∫–æ–ª–æ–¥—É üîÆ")
    try:
        report = process_user_nicknames(user_nick, target[1:], compatibility_prompt_)
        await loading.edit_text(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(e)
        await loading.edit_text("–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω–µ –∑–Ω–∞—é—Ç –Ω–∏—á–µ–≥–æ –æ–± —ç—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–µ.")

@dp.message(BotStates.waiting_for_qualities_nick)
async def process_qualities(message: Message, state: FSMContext):
    user_nick = get_current_username(message)
    target = message.text.strip()
    if not target.startswith("@"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤–∏–¥–∞ @nickname.")
        return
    await state.clear()
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    loading = await message.answer("üîÆ –¢—É—Å—É—é –∫–æ–ª–æ–¥—É üîÆ")
    try:
        report = process_user_nicknames(user_nick, target[1:], qualities_prompt_)
        await loading.edit_text(report, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(e)
        await loading.edit_text("–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω–µ –∑–Ω–∞—é—Ç –Ω–∏—á–µ–≥–æ –æ–± —ç—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–µ.")

@dp.message()
async def fallback(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

async def main():
    global bot
    if not BOT_TOKEN:
        logger.error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    bot = Bot(token=BOT_TOKEN)
    logger.info(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {bot.id}')
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
