from aiogram import Router, F, Bot
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQueryResultUnion,
    CallbackQuery,
)
from aiogram.enums import ParseMode
from loguru import logger
import re
import json
import html

from vox.asyncapi import AsyncVoxAPI
from vox_executable import process_user_nickname, process_user_nicknames
from prompts import (
    prediction_prompt,
    qualities_prompt,
    answers_prompt,
    yes_no_prompt,
    compatibility_prompt,
    compatibility_of_2_prompt,
    daily_prediction_prompt,
)
from utils.nickname_codec import encode_nickname, decode_nickname
from mixpanel import Mixpanel
from config import MIXPANEL_TOKEN

router = Router()
mp = Mixpanel(MIXPANEL_TOKEN) if MIXPANEL_TOKEN else None


def encode_nickname(nickname: str) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data, –∑–∞–º–µ–Ω—è—è _ –Ω–∞ -"""
    return nickname.replace("_", "-")


def decode_nickname(encoded_nickname: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –∏–∑ callback_data, –∑–∞–º–µ–Ω—è—è - –Ω–∞ _"""
    return encoded_nickname.replace("-", "_")


def escape_nickname_for_markdown(nickname: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown"""
    return nickname.replace("_", "\\_")


class VoxMiddleware:
    def __init__(self, vox: AsyncVoxAPI):
        self.vox = vox

    async def __call__(self, handler, event, data):
        data["vox"] = self.vox
        return await handler(event, data)


@router.inline_query()
async def inline_prediction_handler(inline_query: InlineQuery, vox: AsyncVoxAPI):
    """Inline —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    results: list[InlineQueryResultUnion] = []
    query = inline_query.query.strip()
    user_id = inline_query.from_user.id if inline_query.from_user else None
    logger.info(
        f"[INLINE] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç user_id={user_id}"
    )
    query_type = 'nickname' if query.startswith("@") or (
        query and all(c.isalnum() or c == "_" for c in query) and len(query) < 30
    ) else 'question'
    
    if mp:
        mp.track(
            distinct_id=str(user_id) if user_id else "anonymous",
            event_name="inline_query",
            properties={
                "telegram_user_id": user_id,
                "query": query,
                "query_type": query_type
            },
        )

    if not query:
        logger.info("[INLINE] –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        results = [
            InlineQueryResultArticle(
                id="1",
                title="üîÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å",
                description="–í–≤–µ–¥–∏—Ç–µ @nickname –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å",
                input_message_content=InputTextMessageContent(
                    message_text=(
                        "üîÆ –í–≤–µ–¥–∏—Ç–µ @nickname –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤ –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
                        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞/–ù–µ—Ç.\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞:\n"
                        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
                        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞\n"
                        "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞–º–∏\n"
                        "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
                        "‚Ä¢ –û—Ç–≤–µ—Ç –î–∞/–ù–µ—Ç\n"
                    )
                ),
            )
        ]
        await inline_query.answer(results=results, cache_time=1)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    match = re.match(r"@?(\w{1,30})\s+@?(\w{1,30})$", query)
    if match:
        nick1, nick2 = match.group(1), match.group(2)
        encoded_nick1 = encode_nickname(nick1)
        encoded_nick2 = encode_nickname(nick2)
        results = [
            InlineQueryResultArticle(
                id=f"compat2_{encoded_nick1}_{encoded_nick2}",
                title=f"‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{nick1} –∏ @{nick2}",
                description="–£–∑–Ω–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏",
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{nick1} –∏ @{nick2}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode=ParseMode.HTML,
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π",
                                callback_data=f"get_comp2_{encoded_nick1}_{encoded_nick2}",
                            )
                        ]
                    ]
                ),
            )
        ]
        logger.info(
            f"[INLINE] –ö–Ω–æ–ø–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ª—é–¥–µ–π: {results[0].reply_markup.inline_keyboard if results[0].reply_markup else None}"
        )
        await inline_query.answer(results=results, cache_time=1)
        return

    is_nickname = query.startswith("@") or (
        query and all(c.isalnum() or c == "_" for c in query) and len(query) < 30
    )
    logger.info(f"[INLINE] –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {'–Ω–∏–∫–Ω–µ–π–º' if is_nickname else '–≤–æ–ø—Ä–æ—Å'}")

    if is_nickname:
        clean_nickname = query[1:] if query.startswith("@") else query
        encoded_nickname = encode_nickname(clean_nickname)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (username –∏–ª–∏ user_id)
        user_nick = (
            inline_query.from_user.username
            if inline_query.from_user and inline_query.from_user.username
            else str(inline_query.from_user.id) if inline_query.from_user else "user"
        )
        encoded_user_nick = encode_nickname(user_nick)
        results = [
            InlineQueryResultArticle(
                id=f"prediction_{encoded_nickname}",
                title=f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è @{clean_nickname}",
                description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å",
                input_message_content=InputTextMessageContent(
                    message_text=f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è @{clean_nickname}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode=ParseMode.HTML,
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                                callback_data=f"get_pred_{encoded_nickname}",
                            )
                        ]
                    ]
                ),
            ),
            InlineQueryResultArticle(
                id=f"qualities_{encoded_nickname}",
                title=f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤ @{clean_nickname}",
                description="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã",
                input_message_content=InputTextMessageContent(
                    message_text=f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤ @{clean_nickname}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode=ParseMode.HTML,
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞",
                                callback_data=f"get_qual_{encoded_nickname}",
                            )
                        ]
                    ]
                ),
            ),
            InlineQueryResultArticle(
                id=f"compat2_{encoded_user_nick}_{encoded_nickname}",
                title=f"‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{user_nick} –∏ @{clean_nickname}",
                description="–£–∑–Ω–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º",
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{user_nick} –∏ @{clean_nickname}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode=ParseMode.HTML,
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π",
                                callback_data=f"get_comp2_{encoded_user_nick}_{encoded_nickname}",
                            )
                        ]
                    ]
                ),
            ),
        ]
        for r in results:
            if r.reply_markup and hasattr(r.reply_markup, "inline_keyboard"):
                logger.info(
                    f"[INLINE] –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞: {r.reply_markup.inline_keyboard}"
                )
            else:
                logger.info(f"[INLINE] reply_markup: {r.reply_markup}")
    else:
        results = [
            InlineQueryResultArticle(
                id="question",
                title="üîÆ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
                input_message_content=InputTextMessageContent(
                    message_text=f"üîÆ –í–æ–ø—Ä–æ—Å: {query}\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode=ParseMode.HTML,
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç",
                                callback_data=f"get_q_{query[:50]}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç",
                                callback_data=f"get_yesno_{query[:50]}",
                            )
                        ],
                    ]
                ),
            )
        ]
    await inline_query.answer(results=results, cache_time=1)


@router.callback_query(lambda c: c.data.startswith("get_pred_"))
async def handle_get_prediction(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    nickname = decode_nickname(callback.data.replace("get_pred_", "")) if callback.data else ""
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è @{nickname}")
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_prediction",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "target_nickname": nickname
            },
        )
    
    bot = callback.bot
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è @{nickname}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è @{nickname}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        daily_prompt = daily_prediction_prompt
        prediction = await process_user_nickname(vox, nickname, daily_prompt)
        if prediction:
            formatted = f"<b>üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è @{nickname}</b>\n\n{prediction}"
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    formatted,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    error_text,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(
            f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è @{nickname}: {e}"
        )
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                error_text,
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]


@router.callback_query(lambda c: c.data.startswith("get_q_"))
async def handle_get_question(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    question = callback.data.replace("get_q_", "") if callback.data else ""
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}")
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_question",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "question": question[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
            },
        )
    
    bot = callback.bot
    user_nick = (
        callback.from_user.username
        if callback.from_user and callback.from_user.username
        else str(callback.from_user.id) if callback.from_user else "user"
    )
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        question_prompt = f"–í–æ–ø—Ä–æ—Å: {question}" + answers_prompt
        answer = await process_user_nickname(vox, user_nick, question_prompt)
        if answer:
            formatted = f"<b>üîÆ –í–æ–ø—Ä–æ—Å:</b> {question}\n\n<b>–û—Ç–≤–µ—Ç:</b>\n{answer}"
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    formatted,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    error_text,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                error_text,
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]


@router.callback_query(lambda c: c.data.startswith("get_qual_"))
async def handle_get_qualities(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    nickname = decode_nickname(callback.data.replace("get_qual_", "")) if callback.data else ""
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è @{nickname}")
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_qualities",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "target_nickname": nickname
            },
        )
    
    bot = callback.bot
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ @{nickname}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ @{nickname}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        result = await process_user_nickname(
            vox, nickname, qualities_prompt["people_qualities"]
        )
        if result:
            formatted = f"<b>üîÆ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤ @{nickname}</b>\n\n{result}"
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    formatted,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    error_text,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è @{nickname}: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                error_text,
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]


@router.callback_query(lambda c: c.data.startswith("get_yesno_"))
async def handle_get_yesno(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    question = callback.data.replace("get_yesno_", "") if callback.data else ""
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–∞/–Ω–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}")
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_yesno",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "question": question[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
            },
        )
    
    bot = callback.bot
    user_nick = (
        callback.from_user.username
        if callback.from_user and callback.from_user.username
        else str(callback.from_user.id) if callback.from_user else "user"
    )
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –î–∞/–ù–µ—Ç...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>üîÆ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –î–∞/–ù–µ—Ç...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        yesno_prompt_full = (
            f"–í–æ–ø—Ä–æ—Å: {question}\n\n–î–∞–π –æ—Ç–≤–µ—Ç –î–∞ –∏–ª–∏ –ù–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º."
            + yes_no_prompt
        )
        answer = await process_user_nickname(vox, user_nick, yesno_prompt_full)
        if answer:
            formatted = f"<b>üîÆ –í–æ–ø—Ä–æ—Å:</b> {question}\n\n<b>–û—Ç–≤–µ—Ç –î–∞/–ù–µ—Ç:</b>\n{answer}"
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    formatted,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    error_text,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–∞/–Ω–µ—Ç: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –î–∞/–ù–µ—Ç."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                error_text,
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]


@router.callback_query(lambda c: c.data.startswith("get_comp_"))
async def handle_get_compatibility(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    target_nick = decode_nickname(callback.data.replace("get_comp_", "")) if callback.data else ""
    user_nick = callback.from_user.username if callback.from_user and callback.from_user.username else str(callback.from_user.id) if callback.from_user else "user"
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ @{user_nick} –∏ @{target_nick}")
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_compatibility",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "user_nickname": user_nick,
                "target_nickname": target_nick
            },
        )
    
    bot = callback.bot
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>‚ù§Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{user_nick} –∏ @{target_nick}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>‚ù§Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{user_nick} –∏ @{target_nick}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        report = await process_user_nicknames(vox, user_nick, target_nick, compatibility_prompt)
        if report:
            formatted = f"<b>‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{user_nick} –∏ @{target_nick}</b>\n\n{report}"
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(formatted, inline_message_id=callback.inline_message_id, parse_mode=ParseMode.HTML)
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(error_text, inline_message_id=callback.inline_message_id, parse_mode=ParseMode.HTML)
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ @{user_nick} –∏ @{target_nick}: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(error_text, inline_message_id=callback.inline_message_id, parse_mode=ParseMode.HTML)
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]


@router.callback_query(lambda c: c.data.startswith("get_comp2_"))
async def handle_get_compatibility_two(callback: CallbackQuery, vox: AsyncVoxAPI):
    await callback.answer()
    data = callback.data.replace("get_comp2_", "") if callback.data else ""
    parts = data.split("_")
    if len(parts) >= 2:
        nick1 = decode_nickname(parts[0])
        nick2 = decode_nickname(parts[1])
    else:
        nick1, nick2 = data, ""
    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ª—é–¥–µ–π: @{nick1} –∏ @{nick2}")
    manual_prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç—Ç–∏—Ö –ª—é–¥–µ–π –º–µ–∂–¥—É —Å–æ–±–æ–π.\n"
        "–û–ø–∏—à–∏ –≥–ª–∞–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö.\n"
        "–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª—é–¥–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã.\n"
        "–¢–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ, –≤—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ.\n"
        "–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
        "–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö —Ç–∞—Ä–æ, —É–ø–æ–º—è–Ω–∏ –∫–∞—Ä—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –º–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π bullet list.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <ul>, <ol>, <li>.\n"
        "–ù–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏ —á–∞—Ç–∞—Ö.\n"
        "–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–æ–≤ <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π <html> –∏ <body> —Ç–µ–≥–∏."
    )
    
    if mp:
        mp.track(
            distinct_id=str(callback.from_user.id) if callback.from_user else "anonymous",
            event_name="inline_compatibility_two",
            properties={
                "telegram_user_id": callback.from_user.id if callback.from_user else None,
                "nickname1": nick1,
                "nickname2": nick2
            },
        )
    
    bot = callback.bot
    try:
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                f"<b>‚ù§Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{nick1} –∏ @{nick2}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"<b>‚ù§Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{nick1} –∏ @{nick2}...</b>\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
        report = await process_user_nicknames(vox, nick1, nick2, manual_prompt)
        if report:
            formatted = f"<b>‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å @{nick1} –∏ @{nick2}</b>\n\n{report}"
            try:
                if callback.inline_message_id and bot is not None:
                    await bot.edit_message_text(
                        formatted,
                        inline_message_id=callback.inline_message_id,
                        parse_mode=ParseMode.HTML,
                    )
                elif callback.message and hasattr(callback.message, "edit_text"):
                    await callback.message.edit_text(formatted, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
            except Exception as e:
                logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML, –ø—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode: {e}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ parse_mode
                if callback.inline_message_id and bot is not None:
                    await bot.edit_message_text(
                        formatted,
                        inline_message_id=callback.inline_message_id
                    )
                elif callback.message and hasattr(callback.message, "edit_text"):
                    await callback.message.edit_text(formatted)  # type: ignore[attr-defined]
        else:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if callback.inline_message_id and bot is not None:
                await bot.edit_message_text(
                    error_text,
                    inline_message_id=callback.inline_message_id,
                    parse_mode=ParseMode.HTML,
                )
            elif callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
    except Exception as e:
        logger.exception(f"[CALLBACK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ª—é–¥–µ–π @{nick1} –∏ @{nick2}: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
        if callback.inline_message_id and bot is not None:
            await bot.edit_message_text(
                error_text,
                inline_message_id=callback.inline_message_id,
                parse_mode=ParseMode.HTML,
            )
        elif callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(error_text, parse_mode=ParseMode.HTML)  # type: ignore[attr-defined]
